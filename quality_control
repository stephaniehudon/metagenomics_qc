rule raw_per_file_fastqc: 
    """
    Makes fastqc reports for each individual input file.
    """
    input:
        forward = lambda wildcards: config["samples"][wildcards.sample]["forward"],
        reverse = lambda wildcards: config["samples"][wildcards.sample]["reverse"]
    output:
        raw_dir + "{sample}/fastqc_per_file/{sample}_fastqc.done"
    threads:
        4
    log:
        raw_dir + "logs/raw_per_file_fastqc.sample_{sample}.log"
    params:
        env = config['envs']['raw']
    run:
        out_dir = os.path.dirname(output[0])
        in_fastqs = ' '.join(input.forward + input.reverse)
        shell("""
              set +u; {params.env}; set -u

              fastqc --threads {threads} --outdir {out_dir} {in_fastqs} 2> {log} 1>&2

              touch {output}
              """)


rule raw_per_file_multiqc: 
    """
    Runs multiqc for set of individual input files.
    """
    input:
        expand(raw_dir + "{sample}/fastqc_per_file/{sample}_fastqc.done", sample=config['samples'])
    output:
        raw_dir + "multiQC_per_file/multiqc_report.html"
    threads:
        4
    params:
        env = config['envs']['raw']
    log:
        raw_dir + "logs/raw_per_file_multiqc.log"
    run:
        out_dir = os.path.dirname(output[0])
        shell("""
              set +u; {params.env}; set -u

              multiqc -f -o {out_dir} {raw_dir}/*/fastqc_per_file 2> {log} 1>&2
              """)


rule raw_combine_files:
    """
    Combines multiple input fastqs per sample into a temporary single fastq
    """
    input:
        forward = lambda wildcards: config["samples"][wildcards.sample]["forward"],
        reverse = lambda wildcards: config["samples"][wildcards.sample]["reverse"]
    output:
        forward = temp(raw_dir + "{sample}/combined_reads/{sample}.R1.fastq.gz"),
        reverse = temp(raw_dir + "{sample}/combined_reads/{sample}.R2.fastq.gz")
    threads:
        4
    log:
        raw_dir + "logs/raw_combine_files.sample_{sample}.log"
    run:
        f_fastqs = ' '.join(input.forward)
        r_fastqs = ' '.join(input.reverse)
        shell("""
              cat {f_fastqs} > {output.forward} 2> {log}
              cat {r_fastqs} > {output.reverse} 2> {log}
              """)


rule raw_per_sample_fastqc: 
    """
    Makes fastqc reports for each individual input file.
    """
    input:
        forward = raw_dir + "{sample}/combined_reads/{sample}.R1.fastq.gz",
        reverse = raw_dir + "{sample}/combined_reads/{sample}.R2.fastq.gz"
    output:
        html = raw_dir + "{sample}/fastqc_per_sample/{sample}.R1_fastqc.html",
        zip = raw_dir + "{sample}/fastqc_per_sample/{sample}.R2_fastqc.zip"
    threads:
        4
    params:
        env = config['envs']['raw']
    log:
        raw_dir + "logs/raw_per_sample_fastqc.sample_{sample}.log"
    run:
        out_dir = os.path.dirname(output[0])
        print(out_dir)
        shell("""
              set +u; {params.env}; set -u

              fastqc --threads {threads} --outdir {out_dir} {input.forward} {input.reverse} 2> {log} 1>&2
              """)


rule raw_per_sample_multiqc:
    """
    Runs multiqc for combined input files.
    """
    input:
        expand(raw_dir + "{sample}/fastqc_per_sample/{sample}.R2_fastqc.zip", sample=config['samples']),
    output:
        raw_dir + "multiQC_per_sample/multiqc_report.html"
    threads:
        4
    params:
        env = config['envs']['raw']
    log:
        raw_dir + "logs/raw_per_sample_multiqc.log"
    run:
        out_dir = os.path.dirname(output[0])
        shell("""
              set +u; {params.env}; set -u

              multiqc -f -o {out_dir} {raw_dir}/*/fastqc_per_sample 2> {log} 1>&2
              """)


rule raw:
    """
    Top-level rule to do raw read prep
    """
    input:
        raw_dir + "multiQC_per_file/multiqc_report.html",
        raw_dir + "multiQC_per_sample/multiqc_report.html"


rule qc_atropos:
    """
    Does adapter trimming and read QC with Atropos
    """
    input:
        forward = raw_dir + "{sample}/combined_reads/{sample}.R1.fastq.gz",
        reverse = raw_dir + "{sample}/combined_reads/{sample}.R2.fastq.gz"
    output:
        forward = qc_dir + "{sample}/{trimmer}_trimmed/{sample}.trimmed.R1.fastq.gz",
        reverse = qc_dir + "{sample}/{trimmer}_trimmed/{sample}.trimmed.R2.fastq.gz"
    threads:
        8
    params:
        atropos = config['params']['atropos'],
        env = config['envs']['qc']
    log:
        qc_dir + "logs/qc_atropos.sample_{sample}.log"
    benchmark:
        "benchmarks/qc/qc_atropos.sample_{sample}.txt"
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            f_fp = os.path.basename(output.forward)
            r_fp = os.path.basename(output.reverse)
            shell("""
                  set +u; {params.env}; set -u
              
                  atropos --threads {threads} {params.atropos} --report-file {log} --report-formats txt -o {temp_dir}/{f_fp} -p {temp_dir}/{r_fp} -pe1 {input.forward} -pe2 {input.reverse}

                  scp {temp_dir}/{f_fp} {output.forward}
                  scp {temp_dir}/{r_fp} {output.reverse}
                  """)


rule qc_filter:
    """
    Performs host read filtering on paired end data using Bowtie and Samtools/
    BEDtools. Takes the four output files generated by Trimmomatic. 

    Also requires an indexed reference (path specified in config). 

    First, uses Bowtie output piped through Samtools to only retain read pairs
    that are never mapped (either concordantly or just singly) to the indexed
    reference genome. Fastqs from this are gzipped into matched forward and 
    reverse pairs. 

    Unpaired forward and reverse reads are simply run through Bowtie and
    non-mapping gzipped reads output.

    All piped output first written to localscratch to avoid tying up filesystem.
    """
    input:
        forward = qc_dir + "{sample}/%s_trimmed/{sample}.trimmed.R1.fastq.gz" % trimmer,
        reverse = qc_dir + "{sample}/%s_trimmed/{sample}.trimmed.R2.fastq.gz" % trimmer
    output:
        forward = qc_dir + "{sample}/filtered/{sample}.R1.trimmed.filtered.fastq.gz",
        reverse = qc_dir + "{sample}/filtered/{sample}.R2.trimmed.filtered.fastq.gz"
    params:
        filter_db = config['params']['filter_db'],
        env = config['envs']['qc']
    threads:
        4
    log:
        bowtie = qc_dir + "logs/qc_filter.bowtie.sample_{sample}.log",
        other = qc_dir + "logs/qc_filter.other.sample_{sample}.log"
    benchmark:
         "benchmarks/qc/qc_filter.sample_{sample}.txt"
    run:
        if params.filter_db is None:
            f_fp = os.path.abspath(input.forward)
            r_fp = os.path.abspath(input.reverse)
            shell("""
                  ln -s {f_fp} {output.forward}
                  ln -s {r_fp} {output.reverse}

                  echo 'No DB provided; sample not filtered.' > {log.bowtie}
                  echo 'No DB provided; sample not filtered.' > {log.other}
                  """)
        else:
            with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
                shell("""
                      set +u; {params.env}; set -u
          
                      bowtie2 -p {threads} -x {params.filter_db} --very-sensitive -1 {input.forward} -2 {input.reverse} 2> {log.bowtie}| \
                      samtools view -f 12 -F 256 -b -o {temp_dir}/{wildcards.sample}.unsorted.bam 2> {log.other} 
                       
                      samtools sort -T {temp_dir}/{wildcards.sample} -@ {threads} -n \
                      -o {temp_dir}/{wildcards.sample}.bam {temp_dir}/{wildcards.sample}.unsorted.bam 2> {log.other} 

                      bedtools bamtofastq -i {temp_dir}/{wildcards.sample}.bam -fq {temp_dir}/{wildcards.sample}.R1.trimmed.filtered.fastq -fq2 {temp_dir}/{wildcards.sample}.R2.trimmed.filtered.fastq 2> {log.other}

                      pigz -p {threads} -c {temp_dir}/{wildcards.sample}.R1.trimmed.filtered.fastq > {temp_dir}/{wildcards.sample}.R1.trimmed.filtered.fastq.gz
                      pigz -p {threads} -c {temp_dir}/{wildcards.sample}.R2.trimmed.filtered.fastq > {temp_dir}/{wildcards.sample}.R2.trimmed.filtered.fastq.gz

                      cp {temp_dir}/{wildcards.sample}.R1.trimmed.filtered.fastq.gz {output.forward}
                      cp {temp_dir}/{wildcards.sample}.R2.trimmed.filtered.fastq.gz {output.reverse} 
                      """)


rule qc_per_sample_fastqc: 
    """
    Makes fastqc reports for each individual input file.
    """
    input:
        forward = qc_dir + "{sample}/filtered/{sample}.R1.trimmed.filtered.fastq.gz",
        reverse = qc_dir + "{sample}/filtered/{sample}.R2.trimmed.filtered.fastq.gz"
    output:
        html = qc_dir + "{sample}/fastqc_per_sample/{sample}.R1.trimmed.filtered_fastqc.html",
        zip = qc_dir + "{sample}/fastqc_per_sample/{sample}.R2.trimmed.filtered_fastqc.zip"
    threads:
        4
    params:
        env = config['envs']['qc']
    log:
        qc_dir + "logs/qc_per_sample_fastqc.sample_{sample}.log"
    benchmark:
        "benchmarks/qc/qc_per_sample_fastqc.sample_{sample}.txt"
    run:
        out_dir = os.path.dirname(output[0])
        shell("""
              set +u; {params.env}; set -u
          
              fastqc --threads {threads} --outdir {out_dir} {input.forward} {input.reverse} 2> {log} 1>&2
              """)


rule qc_per_sample_multiqc:
    """
    Runs multiqc for combined input files.
    """
    input:
        expand(qc_dir + "{sample}/fastqc_per_sample/{sample}.R2.trimmed.filtered_fastqc.zip", sample=samples),
    output:
        qc_dir + "multiQC_per_sample/multiqc_report.html"
    threads:
        4
    params:
        env = config['envs']['qc']
    log:
        qc_dir + "logs/qc_per_sample_multiqc.log"
    run:
        out_dir = os.path.dirname(output[0])
        shell("""
              set +u; {params.env}; set -u
          
              multiqc -f -s -o {out_dir} {qc_dir}/*/fastqc_per_sample {qc_dir}/logs 2> {log} 1>&2
              """)


rule qc:
    input:
        expand(qc_dir + "{sample}/{trimmer}_trimmed/{sample}.trimmed.R1.fastq.gz", sample=samples, trimmer=trimmer),
        expand(qc_dir + "{sample}/{trimmer}_trimmed/{sample}.trimmed.R2.fastq.gz", sample=samples, trimmer=trimmer),
        expand(qc_dir + "{sample}/filtered/{sample}.R1.trimmed.filtered.fastq.gz", sample=samples),
        expand(qc_dir + "{sample}/filtered/{sample}.R2.trimmed.filtered.fastq.gz", sample=samples),
        qc_dir + "multiQC_per_sample/multiqc_report.html"

